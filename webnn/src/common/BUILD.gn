# Copyright 2019 The Dawn Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../../scripts/webnn_overrides_with_defaults.gni")

import("//build_overrides/build.gni")
import("${webnn_root}/scripts/webnn_features.gni")

###############################################################################
# Common webnn configs
###############################################################################

config("webnn_public_include_dirs") {
  include_dirs = [
    "${target_gen_dir}/../../src/include",
    "${webnn_root}/src/include",
  ]
}

config("webnn_internal") {
  include_dirs = [
    "${target_gen_dir}/../../../src/webnn",
    "${webnn_root}/src",
    # For using third_party
    "${webnn_root}",
  ]

  defines = []

  if (webnn_enable_null) {
    defines += [ "WEBNN_ENABLE_BACKEND_NULL" ]
  }
  
  if (webnn_enable_openvino) {
    defines += [ "WEBNN_ENABLE_BACKEND_OPENVINO" ]
  }

  if (webnn_enable_dml) {
    defines += [ "WEBNN_ENABLE_BACKEND_DML" ]
  }

  if (webnn_enable_onednn) {
    defines += [ "WEBNN_ENABLE_BACKEND_ONEDNN" ]
  }

  cflags = []
  if (is_clang) {
    cflags += [ "-Wno-shadow" ]
  }

  # Enable more warnings that were found when using Dawn in other projects.
  # Add them only when building in standalone because we control which clang
  # version we use. Otherwise we risk breaking projects depending on Dawn when
  # the use a different clang version.
  if (dawn_standalone && is_clang) {
    cflags += [
      "-Wconditional-uninitialized",
      "-Wcstring-format-directive",
      "-Wc++11-narrowing",
      "-Wdeprecated-copy",
      "-Wdeprecated-copy-dtor",
      "-Wduplicate-enum",
      "-Wextra-semi-stmt",
      "-Wimplicit-fallthrough",
      "-Winconsistent-missing-destructor-override",
      "-Winvalid-offsetof",
      "-Wmissing-field-initializers",
      "-Wnon-c-typedef-for-linkage",
      "-Wpessimizing-move",
      "-Wrange-loop-analysis",
      "-Wredundant-move",
      "-Wshadow-field",
      "-Wstrict-prototypes",
      "-Wtautological-unsigned-zero-compare",
      "-Wunreachable-code-aggressive",
      "-Wunused-but-set-variable",
    ]

    if (is_win) {
      cflags += [
        # clang-cl doesn't know -pedantic, pass it explicitly to the clang driver
        "/clang:-pedantic",

        # Allow the use of __uuidof()
        "-Wno-language-extension-token",
      ]
    } else {
      cflags += [ "-pedantic" ]
    }

    # webnn_enable_dml
    if (is_clang) {
      cflags += [
        # Allow the use of DEFINE_ENUM_FLAG_OPERATORS(ENUMTYPE); in DirectML.h
        "-Wno-extra-semi",

        # Allow the use of DMLX_THROW(_hr); in DirectMLX.h
        "-Wno-extra-semi-stmt",

        # Allow the use of DML_OPERATOR_GRAPH_NODE_DESC{ node.op.Get() } in DirectMLX.h
        "-Wno-missing-field-initializers",
        "-Wno-unused-but-set-variable"
      ]
    }
  }

}
